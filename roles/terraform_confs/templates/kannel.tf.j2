# NIC creation blocks
{% for vm in groups['kannel'] %}
resource "azurerm_network_interface" "vm_nic_{{ vm }}" {
  name                  = "nic1_{{ vm }}"
  resource_group_name   = var.resource_group_name
  location              = var.location

  ip_configuration {
    name                          = "ip_{{ vm }}"
    subnet_id                     = azurerm_subnet.{{ hostvars[vm].subnet }}.id
    private_ip_address_allocation = "Static"
    private_ip_address            = "{{ hostvars[vm].internal_ip }}"
  }
}

{% endfor -%}

# Virtual machine creation blocks
{% for vm in groups['kannel'] %}

# {{ vm }} resource block
resource "azurerm_virtual_machine" "{{ vm }}" {
  depends_on            = [azurerm_network_interface.vm_nic_{{ vm }}]
  name                  = "{{ vm }}"
  vm_size               = "{{ hostvars[vm].vm_size }}"
  resource_group_name   = var.resource_group_name
  location              = var.location
  network_interface_ids = [azurerm_network_interface.vm_nic_{{ vm }}.id]

  # Delete data disk at vm deletion
  delete_os_disk_on_termination = true
  delete_data_disks_on_termination = true

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "18.04-LTS"
    version   = "latest"
  }

  storage_os_disk {
    name              = "osdisk_{{ vm }}"
    disk_size_gb      = "{{ hostvars[vm].osdisk_size }}"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  os_profile {
    computer_name  = "{{ vm }}"
    admin_username = "mmuladmin"
    admin_password = "Terraform1234!"
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }

  boot_diagnostics {
    enabled             = true
    storage_uri = azurerm_storage_account.{{ azure_storage_account_name }}.primary_blob_endpoint
  }
}

# {{ vm }} disk1_{{ vm }} managed disk
resource "azurerm_managed_disk" "disk1_{{ vm }}" {
  depends_on           = [azurerm_virtual_machine.{{ vm }}]
  name                 = "disk1_{{ vm }}"
  resource_group_name  = var.resource_group_name
  location             = var.location
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "{{ hostvars[vm].disk1_size }}"
}

# {{ vm }} disk1_{{ vm }} attach disk
resource "azurerm_virtual_machine_data_disk_attachment" "disk1_{{ vm }}" {
  depends_on         = [azurerm_managed_disk.disk1_{{ vm }}]
  managed_disk_id    = azurerm_managed_disk.disk1_{{ vm }}.id
  virtual_machine_id = azurerm_virtual_machine.{{ vm }}.id
  lun                = "1"
  caching            = "ReadWrite"
}
{% endfor %}
