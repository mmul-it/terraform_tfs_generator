{% for vm in groups[group.key] %}
# {{ vm }} - {{ hostvars[vm].internal_ip }}, {{ hostvars[vm].vm_size }}
{% if hostvars[vm].disks is defined %}
{% for disk in hostvars[vm].disks %}
# - {{ disk.name }} {{ disk.size }}GB
{% endfor %}
{% endif %}
{% endfor %}

# NIC creation blocks
{% for vm in groups[group.key] %}
{% set vm_basename = vm.split('.')[0] %}
# Set primary_ip {{ vm }}
resource "azurerm_network_interface" "vm_nic1_{{ vm_basename }}" {
  name                  = "nic1_{{ vm_basename }}"
  resource_group_name   = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location              = azurerm_resource_group.{{ azure_resource_group_name }}.location

  ip_configuration {
    name                          = "ip1_{{ vm_basename }}"
    subnet_id                     = azurerm_subnet.{{ hostvars[vm].subnet }}.id
    private_ip_address_allocation = "Static"
    private_ip_address            = "{{ hostvars[vm].internal_ip }}"
  }
{% if hostvars[vm].azure_tags is defined %}

  tags = {
{% for key,value in hostvars[vm].azure_tags.items() %}
    {{ key }} = "{{ value }}"
{% endfor %}
  }
{% endif %}
}

# Set Security Group to NIC
resource "azurerm_network_interface_security_group_association" "{{ vm_basename }}_nic1_to_{{ azure_network_sec_group_name }}" {
  network_interface_id      = azurerm_network_interface.vm_nic1_{{ vm_basename }}.id
  network_security_group_id = azurerm_network_security_group.{{ azure_network_sec_group_name }}.id
}

{% if hostvars[vm].secondary_ip is defined %}
# Set secondary_ip {{ vm }}
resource "azurerm_network_interface" "vm_nic2_{{ vm_basename }}" {
  name                = "nic2_{{ vm_basename }}"
  resource_group_name = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location            = azurerm_resource_group.{{ azure_resource_group_name }}.location

  ip_configuration {
    name                          = "ip2_{{ vm_basename }}"
    subnet_id                     = azurerm_subnet.{{ hostvars[vm].alternative_subnet }}.id
    private_ip_address_allocation = "Static"
    private_ip_address            = "{{ hostvars[vm].secondary_ip }}"
  }
{% if hostvars[vm].azure_tags is defined %}

  tags = {
{% for key,value in hostvars[vm].azure_tags.items() %}
    {{ key }} = "{{ value }}"
{% endfor %}
  }
{% endif %}
}
{% endif %}

{% endfor -%}

# Virtual machine creation blocks
{% for vm in groups[group.key] %}
{% set vm_basename = vm.split('.')[0] %}

# {{ vm }} resource block
resource "azurerm_virtual_machine" "{{ vm_basename }}" {
  name                         = "{{ vm_basename }}"
  vm_size                      = "{{ hostvars[vm].vm_size }}"
  resource_group_name          = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location                     = azurerm_resource_group.{{ azure_resource_group_name }}.location
{% if hostvars[vm].secondary_ip is defined %}
  network_interface_ids        = [azurerm_network_interface.vm_nic1_{{ vm_basename }}.id, azurerm_network_interface.vm_nic2_{{ vm_basename }}.id]
{% else %}
  network_interface_ids        = [azurerm_network_interface.vm_nic1_{{ vm_basename }}.id]
{% endif %}
  primary_network_interface_id = azurerm_network_interface.vm_nic1_{{ vm_basename }}.id

  # Delete data disk at vm deletion
  delete_os_disk_on_termination = true
  delete_data_disks_on_termination = true

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "18.04-LTS"
    version   = "latest"
  }

  storage_os_disk {
    name              = "osdisk_{{ vm_basename }}"
    disk_size_gb      = "{{ hostvars[vm].osdisk_size }}"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  os_profile {
    computer_name  = "{{ vm }}"
    admin_username = "{{ azure_vm_admin_username }}"
{% if azure_vm_disable_password_authentication|lower == 'false' %}
    admin_password = "{{ azure_vm_admin_password }}"
{% endif %}
  }

  os_profile_linux_config {
    disable_password_authentication = {{ azure_vm_disable_password_authentication|lower }}
{% if azure_vm_admin_ssh_public_key_file != '' %}
    ssh_keys {
      path     = "/home/{{ azure_vm_admin_username }}/.ssh/authorized_keys"
      key_data = file("{{ azure_vm_admin_ssh_public_key_file }}")
    }
{% endif %}
  }

  boot_diagnostics {
    enabled     = true
    storage_uri = azurerm_storage_account.{{ azure_storage_account_name }}.primary_blob_endpoint
  }
{% if hostvars[vm].azure_tags is defined %}

  tags = {
{% for key,value in hostvars[vm].azure_tags.items() %}
    {{ key }} = "{{ value }}"
{% endfor %}
  }
{% endif %}
}

{% if hostvars[vm].disks is defined %}
{% for disk in hostvars[vm].disks %}
# {{ vm }} {{ disk.name }} managed disk
resource "azurerm_managed_disk" "{{ disk.name }}_{{ vm_basename }}" {
  depends_on           = [azurerm_virtual_machine.{{ vm_basename }}]
  name                 = "{{ disk.name }}_{{ vm_basename }}"
  resource_group_name  = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location             = azurerm_resource_group.{{ azure_resource_group_name }}.location
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "{{ disk.size }}"
{% if hostvars[vm].azure_tags is defined %}

  tags = {
{% for key,value in hostvars[vm].azure_tags.items() %}
    {{ key }} = "{{ value }}"
{% endfor %}
  }
{% endif %}
}

# {{ vm }} {{ disk.name }} attach disk
resource "azurerm_virtual_machine_data_disk_attachment" "{{ disk.name }}_{{ vm_basename }}" {
  managed_disk_id    = azurerm_managed_disk.{{ disk.name }}_{{ vm_basename }}.id
  virtual_machine_id = azurerm_virtual_machine.{{ vm_basename }}.id
  lun                = "{{ disk.lun }}"
  caching            = "ReadWrite"
}

{% endfor %}
{% endif %}
{% endfor %}
