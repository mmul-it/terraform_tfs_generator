# Virtual machines disks creation blocks for group {{ group_name }}

{% for vm in groups[group_name] %}
{% set vm_basename = vm.split('.')[0] %}
{% if hostvars[vm].osdisk_encrypt is defined and hostvars[vm].osdisk_encrypt | bool and azure_key_vault_enable | bool %}
# {{ vm }} - Encryption Set for OS disk
resource "azurerm_disk_encryption_set" "osdisk_{{ vm_basename }}_encrypted" {
  name                  = "osdisk_{{ vm_basename }}_encrypted"
  resource_group_name   = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location              = azurerm_resource_group.{{ azure_resource_group_name }}.location
  key_vault_key_id      = azurerm_key_vault_key.{{ azure_key_vault_keyname }}.id
  identity {
    type = "SystemAssigned"
  }
}

# {{ vm }} - Access Policy to authorize encrypted for OS disk
resource "azurerm_key_vault_access_policy" "osdisk_{{ vm_basename }}" {
  key_vault_id = azurerm_key_vault.{{ azure_key_vault_name }}.id

  tenant_id = data.azurerm_client_config.current.tenant_id
  object_id = azurerm_disk_encryption_set.osdisk_{{ vm_basename }}_encrypted.identity[0].principal_id

  key_permissions = [
    "get",
    "wrapkey",
    "unwrapkey",
  ]
}
{% endif %}

{% if hostvars[vm].disks is defined %}
{% for disk in hostvars[vm].disks %}
{% if disk.encrypt is defined and disk.encrypt | bool and azure_key_vault_enable | bool %}
# {{ vm }} - Encryption set for {{ disk.name }}
resource "azurerm_disk_encryption_set" "{{ disk.name }}_{{ vm_basename }}_encrypted" {
  name                  = "{{ disk.name }}_{{ vm_basename }}_encrypted"
  resource_group_name   = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location              = azurerm_resource_group.{{ azure_resource_group_name }}.location
  key_vault_key_id      = azurerm_key_vault_key.{{ azure_key_vault_keyname }}.id
  identity {
    type = "SystemAssigned"
  }
}

# {{ vm }} - Key vault Access Policy for {{ disk.name }}
resource "azurerm_key_vault_access_policy" "{{ disk.name }}_{{ vm_basename }}" {
  key_vault_id = azurerm_key_vault.{{ azure_key_vault_name }}.id

  tenant_id = data.azurerm_client_config.current.tenant_id
  object_id = azurerm_disk_encryption_set.{{ disk.name }}_{{ vm_basename }}_encrypted.identity[0].principal_id

  key_permissions = [
    "get",
    "wrapkey",
    "unwrapkey",
  ]
}
{% endif %}

# {{ vm }} - Managed disk {{ disk.name }}
resource "azurerm_managed_disk" "{{ disk.name }}_{{ vm_basename }}" {
  name                   = "{{ disk.name }}_{{ vm_basename }}"
  resource_group_name    = azurerm_resource_group.{{ azure_resource_group_name }}.name
  location               = azurerm_resource_group.{{ azure_resource_group_name }}.location
  storage_account_type   = "Standard_LRS"
  create_option          = "Empty"
  disk_size_gb           = "{{ disk.size }}"
{% if disk.encrypt is defined and disk.encrypt | bool and azure_key_vault_enable | bool %}
  disk_encryption_set_id = azurerm_disk_encryption_set.{{ disk.name }}_{{ vm_basename }}_encrypted.id
  depends_on             = [azurerm_linux_virtual_machine.{{ vm_basename }},azurerm_key_vault_access_policy.{{ disk.name }}_{{ vm_basename }}]
{% else %}
  depends_on             = [azurerm_linux_virtual_machine.{{ vm_basename }}]
{% endif %}
{% if hostvars[vm].azure_tags is defined %}

  tags = {
{% for key,value in hostvars[vm].azure_tags.items() %}
    {{ key }} = "{{ value }}"
{% endfor %}
  }
{% endif %}
}

# {{ vm }} - Disk attachment for {{ disk.name }}
resource "azurerm_virtual_machine_data_disk_attachment" "{{ disk.name }}_{{ vm_basename }}" {
  managed_disk_id    = azurerm_managed_disk.{{ disk.name }}_{{ vm_basename }}.id
  virtual_machine_id = azurerm_linux_virtual_machine.{{ vm_basename }}.id
  lun                = "{{ disk.lun }}"
  caching            = "ReadWrite"
}

# {{ vm }} - Disk extension for {{ disk.name }}
resource "azurerm_virtual_machine_extension" "extension_{{ disk.name }}_{{ vm_basename }}" {
  name                 = "extension_{{ disk.name }}_{{ vm_basename }}"
  virtual_machine_id   = azurerm_linux_virtual_machine.{{ vm_basename }}.id
  publisher            = "Microsoft.Azure.Extensions"
  type                 = "CustomScript"
  type_handler_version = "2.0"
  depends_on           = [azurerm_virtual_machine_data_disk_attachment.{{ disk.name }}_{{ vm_basename }}]
  settings             = jsonencode({ script = base64encode(local.{{ disk.name }}_{{ vm_basename }}_partition_mount) })
}

{% endfor %}
{% endif %}
{% endfor %}

# Local variable definitions
locals {
{% for vm in groups[group_name] %}
{% set vm_basename = vm.split('.')[0] %}
{% if hostvars[vm].disks is defined %}
{% for disk in hostvars[vm].disks %}
  # {{ vm }} {{ disk.name }} partition and mount script
  {{ disk.name }}_{{ vm_basename }}_partition_mount = <<EOF
    # Define the device label
    parted '/dev/disk/azure/scsi1/lun{{ disk.lun }}' --script -- mklabel gpt
    # Create the single partition
    parted -a optimal '/dev/disk/azure/scsi1/lun{{ disk.lun }}' --script -- mkpart primary 0% 100%
    # Wait 60 seconds until the partition is visible
    for i in $(seq 1 60); do [ -b '/dev/disk/azure/scsi1/lun{{ disk.lun }}-part1' ] && break || $(sleep 1; continue); done
    # Check partition existence
    [ -b '/dev/disk/azure/scsi1/lun{{ disk.lun }}-part1' ] || exit 1
    # Create the filesystem
    mkfs -t {{ disk.fstype }} '/dev/disk/azure/scsi1/lun{{ disk.lun }}-part1'
    # Create the mount point
    mkdir -p '{{ disk.mountpoint }}'
    # Add mount point to /etc/fstab
    echo '/dev/disk/azure/scsi1/lun{{ disk.lun }}-part1 {{ disk.mountpoint }} {{ disk.fstype }} defaults 0 0' >> /etc/fstab
    # Mount the mount point
    mount '{{ disk.mountpoint }}'
  EOF
{% endfor %}
{% endif %}
{% endfor %}
}
